# -*- coding: utf-8 -*-
"""pcd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJ6HjXfGnGKgiX3QVFo4QjgPvUztk3r3
"""
#membuka dataset
import myutils

raw_data_training, raw_data_testing = myutils.load_CIFAR_dataset(shuffle=False)

class_names = myutils.load_CIFAR_classnames()

n_training = len( raw_data_training )
n_testing = len( raw_data_testing )
print('Loaded CIFAR10 database with {} training and {} testing samples'.format(n_training, n_testing))

#split data kedalam data training dan data testing
import numpy as np

X_training = np.array( raw_data_training )[:,0]
X_testing = np.array( raw_data_testing )[:,0]
y_training = np.array( raw_data_training )[:,1]
y_testing  = np.array( raw_data_testing )[:,1]

#print(len(X_training))
#print(len(y_training))
#menghapus data selain class hewan
airplane = np.where(y_training == 0)
X_training = np.delete(X_training,airplane[0])
y_training = np.delete(y_training,airplane[0])
airplane = np.where(y_testing == 0)
X_testing = np.delete(X_testing,airplane[0])
y_testing = np.delete(y_testing,airplane[0])

automob = np.where(y_training == 1)
X_training = np.delete(X_training,automob[0])
y_training = np.delete(y_training,automob[0])
automob = np.where(y_testing == 1)
X_testing = np.delete(X_testing,automob[0])
y_testing = np.delete(y_testing,automob[0])

ship = np.where(y_training == 8)
X_training = np.delete(X_training,ship[0])
y_training = np.delete(y_training,ship[0])
ship = np.where(y_testing == 8)
X_testing = np.delete(X_testing,ship[0])
y_testing = np.delete(y_testing,ship[0])

truck = np.where(y_training == 9)
X_training = np.delete(X_training,truck[0])
y_training = np.delete(y_training,truck[0])
truck = np.where(y_testing == 9)
X_testing = np.delete(X_testing,truck[0])
y_testing = np.delete(y_testing,truck[0])


n_training = len(X_training)
n_testing = len(X_testing)

# mengubah image ke greyscale
def rgb2gray(image):
    import cv2
    return cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

Xdata_training = [ rgb2gray(X_training[i]) for i in range(n_training)]
Xdata_testing  = [ rgb2gray(X_testing[i]) for i in range(n_testing)]

import random
import matplotlib.pyplot as plt

# memilih 10 random image untuk melihat perubahan
examples_id = random.sample(range(n_training), 10)
fig, axarr = plt.subplots(2,len(examples_id), figsize=(15,3))
for i in range(len(examples_id)):
    id = examples_id[i]
    axarr[0,i].imshow(X_training[id][:,:])
    axarr[0,i].axis('off')
    axarr[1,i].imshow(Xdata_training[id],cmap='gray')
    axarr[1,i].axis('off')
print('contoh setelah preprocessing')
plt.show()

# HOG
# see http://scikit-image.org/docs/dev/api/skimage.feature.html#skimage.feature.hog

# Pengaturan HOG
normalize = True          #  True ==> yields a little bit better score
                          #  
block_norm = 'L2-Hys'     # or 'L1'
orientations = 9          # 
pixels_per_cell = [8, 8]  #  see section 'Additional remarks' for some explanation
cells_per_block = [2, 2]  # 

#Fungsi ekstraksi fitur
def extractFeature(img, vis=False):
    from skimage.feature import hog
    return hog(img, orientations, pixels_per_cell, cells_per_block, block_norm, visualise=vis, transform_sqrt=normalize)

nfeatures = extractFeature(Xdata_training[0], vis=False).size
print('jumlah fitur = {}'.format(nfeatures))

fig, axarr = plt.subplots(3,len(examples_id), figsize=(16,5))
for i in range(len(examples_id)):
    id = examples_id[i]
    axarr[0,i].imshow(X_training[id][:,:])
    axarr[0,i].axis('off')
    axarr[1,i].imshow(Xdata_training[id],cmap='gray')
    axarr[1,i].axis('off')
    _, hog_vis = extractFeature(Xdata_training[id], vis=True)
    axarr[2,i].imshow(hog_vis,cmap='gray')
    axarr[2,i].axis('off')
plt.show()

# feature extraction
import numpy as np

X_training = np.array( [ extractFeature(Xdata_training[i], vis=False) for i in range(n_training) ] )
y_training = np.array( [ y_training[i] for i in range(n_training) ] )

X_testing = np.array( [ extractFeature(Xdata_testing[i], vis=False) for i in range(n_testing) ] )
y_testing = np.array( [ y_testing[i] for i in range(n_testing) ] )

from sklearn import decomposition
pca = decomposition.PCA(n_components=2)
pca.fit(X_training)
X = pca.transform(X_training)
print(pca.explained_variance_ratio_)

plt.figure( figsize=(15,15) )
plt.scatter( X[:, 0], X[:, 1], c=y_training, cmap='tab10' )
# plt.colorbar()
plt.show()

#pembuatan model svm
from sklearn.svm import LinearSVC

# parameter C dipilih hasil percobaan
C = 0.1
clf = LinearSVC(C=C)
clf.fit(X_training, y_training)

clf.score( X_testing, y_testing )
y_predict = clf.predict( X_testing )

#evaluasi model
from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix( y_testing, y_predict )

print( 'Confusion matrix:\n', conf_matrix )

print(clf.score( X_testing, y_testing ))
